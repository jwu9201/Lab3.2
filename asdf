import java.util.Arrays;

public class Runner {
	public static void main(String[] args) {	
		String [] test1 = {"A", "H", "J", "M", "W", "Y"};
		String [] test2 = {"E", "G", "Z", "Z", "Z"};
	
		long start = System.nanoTime();
		ArrayMethods2.merge(test1, test2);
		long end = System.nanoTime();
		long time = end -start; 
		System.out.println("Test1 took: " + time + "nanoseconds");
		System.out.println(Arrays.toString(ArrayMethods2.merge(test1, test2)));

	}
}







public class ArrayMethods2 {
	
	public static int[] merge(int[] list1,int[] list2) {
		int [] merge = new int[list1.length+list2.length];
		int left = 0;
		int right = 0;
		for (int i = 0; i < list1.length + list2.length;i++) {
			if (left == list1.length) {
				merge[i] = list2[right];
				continue;
			}
			if (right == list2.length) {
				merge[i] = list2[left];
				continue;
			}
			if (list1[left] > list2[right]) {
				merge[i] = list2[right];
				right++;
			}
			else {
				merge[i] = list1[left];
				left++;
			}
		}
		return merge;
	}
	public static String[] merge(String[] list1,String[] list2) {
		String [] merge = new String[list1.length+list2.length];
		int left = 0;
		int right = 0;
		for (int i = 0; i < list1.length + list2.length;i++) {
			if (left == list1.length) {
				merge[i] = list2[right];
				continue;
			}
			if (right == list2.length) {
				merge[i] = list2[left];
				continue;
			}
			if (list1[left].compareTo(list2[right]) > 0) {
				merge[i] = list2[right];
				right++;
			}
			else {
				merge[i] = list1[left];
				left++;
			}
		}
		return merge;
	}
	
	public static int partition(int[] list) {
		int pivot = list[0];
		//http://www.javamadesoeasy.com/2015/01/quick-sort.html//
	}
}
